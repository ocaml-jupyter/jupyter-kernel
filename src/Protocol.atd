(*
 * iocaml - an OCaml kernel for IPython
 *
 *   (c) 2014 MicroJamJar Ltd
 *
 * Author(s): andy.ray@ujamjar.com
 * Description: JSON messages sent to/from the kernel
 *
 *)

type dyn <ocaml module="Yojson.Safe" t="json"> = abstract

(* connection information provided by file in $(PROFILE)/secutiry *)
type connection_info = {
    stdin_port : int;
    ip : string;
    control_port : int;
    hb_port : int;
    signature_scheme : string;
    key : string;
    shell_port : int;
    transport : string;
    iopub_port : int;
}

(* header (and parent) information in ZMQ messages *)
type header_info = {
    ~date : string;
    ~version: string;
    ~username : string;
    ~session : string;
    ~msg_id : string;
    ~msg_type : string;
}

(*********************************************************************)
(* code execution *)
(*********************************************************************)

type execute_request = {
    code : string;
    silent : bool;
    store_history : bool;
    user_expressions : dyn;
    allow_stdin : bool;
}

type payload = {
    html : string;
    source : string;
    start_line_number : int;
    text : string;
}

type execute_reply = {
    status : string;
    execution_count : int;
    (* if there was an error *)
    ?ename : string option;
    ?evalue : string option;
    ?traceback : string list option;
    (* if execution was ok *)
    ?payload : payload list option;
    ?er_user_expressions <json name="user_expressions"> : dyn option;
}

type execute_error = {
  (* if there was an error *)
  err_ename <json name ="ename"> : string;
  err_evalue <json name ="evalue"> : string;
  err_traceback <json name ="traceback"> : string list;
}

(*********************************************************************)
(* introspection *)
(*********************************************************************)

type inspect_request = {
  ir_code <json name="code"> : string;
  ir_cursor_pos <json name="cursor_pos">: int; 
  ~ir_detail_level <json name="detail_level">: int; (* 0 or 1, default 0 *)
}

(* TODO error cases *)
type inspect_reply = {
  ir_status <json name="status">: string;
  (* if success *)
  ?ir_found <json name="found">: bool option;
  ?ir_data <json name="data">: dyn option;
  ?ir_metadata <json name="metadata">: dyn option;
  (* if there was an error *)
  ?ir_ename <json name ="ename"> : string option;
  ?ir_evalue <json name ="evalue"> : string option;
  ?ir_traceback <json name ="traceback"> : string list option;
}

(** Multi-line input *)

type is_complete_request = {
  icr_code <json name="code">: string;
}

type is_complete_reply = {
  icr_status <json name="status">: string; (* complete/incomplete/invalid/unknown *)
  ~icr_indent <json name="indent">: string;
}

(*********************************************************************)
(* code completion *)
(*********************************************************************)

type complete_request = {
    line <json name="code"> : string;
    cursor_pos : int;
}

type complete_reply = {
    matches : string list;
    cursor_start: int;
    cursor_end: int;
    cr_status <json name="status"> : string;
}

(*********************************************************************)
(* history *)
(*********************************************************************)

type history_request = {
    output : bool;
    raw : bool;
    hist_access_type : string;
    ~hr_session <json name="session"> : int;
    ~start : int;
    ~stop : int;
    n : int;
    ~pattern : string;
    ~unique : bool;
}

type history_reply = {
    history : string list; (* XXX *)
}

(*********************************************************************)
(* connection information *)
(*********************************************************************)

(* deprecated *)

type connect_reply = {
    cr_shell_port <json name="shell_port"> : int;
    cr_iopub_port <json name="iopub_port"> : int;
    cr_stdin_port <json name="stdin_port"> : int;
    cr_hb_port <json name="hb_port"> : int;
}

(*********************************************************************)
(* comm information *)
(*********************************************************************)

type comm_info_request = {
    ~target_name <json name="target_name">: string;
}

(*********************************************************************)
(* kernel information *)
(*********************************************************************)

(* TODO: missing fields *)
type language_info = {
  li_name <json name="name">: string;
  li_version <json name="version">: string; (* a.b.c *)
  li_mimetype <json name="mimetype">: string;
  li_file_extension <json name="file_extension">: string;
  ?li_codemirror_mode <json name="codemirror_mode">: string option;
}

type help_link = {
  help_text <json name="text">: string;
  help_url <json name="url">: string;
}

type kernel_info_reply = {
    protocol_version : string;  (* a.b.c *)
    (* ipython_version : int * int * int * string; *)
    implementation: string;
    implementation_version: string; (* a.b.c *)
    language_info: language_info;
    banner: string; (* to be displayed at startup *)
    ~help_links: help_link list; (* help menu *)
}

(*********************************************************************)
(* kernel status *)
(*********************************************************************)

type status = {
    execution_state : string;
}

(*********************************************************************)
(* kernel shutdown *)
(*********************************************************************)

type shutdown = {
    restart : bool;
}

(*********************************************************************)
(*********************************************************************)

type display_data = {
    dd_data <json name="data"> : dyn;
    dd_metadata <json name="metadata"> : dyn;
    ?dd_transient <json name="transient">: dyn option;
}

(*********************************************************************)
(*********************************************************************)

type pyin = {
    pi_code <json name="code"> : string;
    pi_execution_count <json name="execution_count"> : int;
}

(*********************************************************************)
(*********************************************************************)

type pyout = {
    po_execution_count <json name="execution_count"> : int;
    po_data <json name="data"> : dyn;
    po_metadata <json name="metadata"> : dyn;
}

(*********************************************************************)
(*********************************************************************)

type stream = {
    st_name <json name="name"> : string;
    st_data <json name="data"> : string;
}

(*********************************************************************)
(*********************************************************************)

type clear_output = {
    wait : bool;
    stdout : bool;
    stderr : bool;
    other : bool;
}


